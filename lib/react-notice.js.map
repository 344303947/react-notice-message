{"version":3,"sources":["../src/react-notice.jsx"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAI,kBAAkB,EAAtB;;AAEA,IAAI,kBAAkB,EAAtB;;AAEA,IAAI,eAAe,IAAnB;;AAEA,IAAI,mBAAmB,IAAvB;;AAEA,IAAI,aAAa,IAAjB;;AAEA,IAAM,cAAc,aAApB;;AAEA,IAAM,iBAAiB,gBAAvB;;IAEM,I;;;AACJ,gBAAY,KAAZ,EAAmB;AAAA;;AAAA,wFACX,KADW;;AAEjB,UAAK,KAAL,GAAa;AACX,cAAQ;AADG,KAAb;;AAIA,UAAK,aAAL,GAAqB,MAAK,aAAL,CAAmB,IAAnB,OAArB;AACA,UAAK,OAAL,GAAe,MAAK,OAAL,CAAa,IAAb,OAAf;AAPiB;AAQlB;;;;oCAEe;AACd,WAAK,OAAL,CAAa,KAAK,KAAL,CAAW,KAAxB;AACD;;;4BAEO,K,EAAO;AACb,yBAAO,WAAP,CAAmB,cAAnB,EAAmC;AACjC,eAAO;AAD0B,OAAnC;AAGD;;;wCAEmB;AAAA;;AAClB,iBAAW,YAAM;AACf,eAAK,QAAL,CAAc,EAAC,QAAQ,IAAT,EAAd;AACD,OAFD,EAEG,CAFH;;AAIA,UAAI,UAAJ,EAAgB;AACd,mBAAW,YAAM;AACf,iBAAK,OAAL,CAAa,OAAK,KAAL,CAAW,KAAxB;AACD,SAFD,EAEG,UAFH;AAGD;AAEF;;;2CAEsB,CAEtB;;;6BAEQ;AACP,UAAI,YAAY,0BACd,YADc,EAEd;AACE,gBAAQ,KAAK,KAAL,CAAW;AADrB,OAFc,CAAhB;AAMA,aACE;AAAA;AAAA,UAAK,WAAa,SAAlB;AACE;AAAA;AAAA,YAAG,WAAU,OAAb,EAAqB,OAAM,OAA3B,EAAmC,SAAW,KAAK,aAAnD;AAAA;AAAA,SADF;AAEI,aAAK,KAAL,CAAW;AAFf,OADF;AAMD;;;;;;IAIG,M;;;;;;;;;;;wCACgB,CACnB;;;;;6BAEQ;;AAEP,UAAI,QAAQ,KAAK,KAAL,CAAW,OAAX,CAAmB,GAAnB,CAAuB,UAAC,GAAD,EAAM,CAAN,EAAY;AAC7C,YAAK,OAAO,EAAZ,EAAgB;AACd,iBAAO,KAAP;AACD;AACD,eACE,8BAAC,IAAD,aAAM,KAAO,CAAb,EAAgB,OAAS,CAAzB,EAA4B,KAAO,CAAnC,IAA0C,GAA1C,EADF;AAGD,OAPW,CAAZ;;AASA,aACE;AAAA;AAAA,UAAK,WAAY,kBAAjB;AACI;AADJ,OADF;AAKD;;;;;;AAGH,mBAAO,SAAP,CAAiB,WAAjB,EAA8B,UAAC,KAAD,EAAQ,IAAR,EAAiB;AAC7C,iDAAsB,eAAtB,IAAuC,IAAvC;;AAEA;AACD,CAJD;;AAMA,IAAI,gBAAgB,mBAAO,SAAP,CAAiB,cAAjB,EAAiC,UAAC,KAAD,EAAQ,IAAR,EAAiB;AAAA,MAC9D,KAD8D,GACpD,IADoD,CAC9D,KAD8D;;;AAGpE,MAAI,CAAC,gBAAgB,KAAhB,CAAL,EAA6B;AAC3B,WAAO,KAAP;AACD;;AAED,MAAI,iBAAiB,gBAAgB,KAAhB,EAAuB,OAA5C;AACA,kBAAgB,IAAhB,CAAqB,cAArB;AACA,kBAAgB,MAAhB,CAAuB,KAAvB,EAA8B,CAA9B,EAAgC,EAAhC;;AAEA;AACD,CAZmB,CAApB;;AAcA,OAAO,kBAAP,GAA4B,YAAW;;AAErC,UAAQ,GAAR,CAAY,eAAZ;AACA,SAAO,eAAP;AACD,CAJD;;AAMA,OAAO,IAAP,GAAc,UAAS,OAAT,EAAkB,KAAlB,EAAyB;AACrC,MAAI,CAAC,YAAL,EAAoB;AAClB,mBAAe,SAAS,aAAT,CAAuB,KAAvB,CAAf;AACA,aAAS,IAAT,CAAc,WAAd,CAA2B,YAA3B;AACD;;AAED,MAAK,MAAM,SAAX,EAAuB;AACrB,QAAK,MAAM,SAAN,IAAmB,UAAxB,EAAoC;AAClC,mBAAa,KAAb;AACD,KAFD,MAEO;AACL,mBAAa,OAAQ,MAAM,SAAd,KAA6B,IAA1C;AACD;AACF;;AAED,qBAAO,WAAP,CAAmB,WAAnB,EAAgC;AAC9B,oBAD8B;AAE9B,eAAW,MAAM;AAFa,GAAhC;;AAKA,SAAO,gBAAP;AAED,CArBD;;AAwBA,SAAS,YAAT,GAAwB;AACtB,qBAAmB,mBAAS,MAAT,CAAgB,8BAAC,MAAD,IAAQ,SAAS,eAAjB,GAAhB,EACjB,YADiB,CAAnB;AAGD;;AAED,OAAO,OAAP,GAAiB,MAAjB","file":"react-notice.js","sourcesContent":["import PubSub from 'pubsub-js';\nimport React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\n\nlet historyMessages = [];\n\nlet noticesMessages = [];\n\nlet containerDOM = null;\n\nlet containerElement = null;\n\nlet removeTime = null;\n\nconst ADD_MESSAGE = 'ADD_MESSAGE';\n\nconst REMOVE_MESSAGE = 'REMOVE_MESSAGE';\n\nclass Item extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      active: false\n    }\n\n    this.removeMessage = this.removeMessage.bind(this);\n    this.publish = this.publish.bind(this);\n  }\n\n  removeMessage() {\n    this.publish(this.props.index);\n  }\n\n  publish(index) {\n    PubSub.publishSync(REMOVE_MESSAGE ,{\n      index: index\n    })\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({active: true})\n    }, 1)\n\n    if (removeTime) {\n      setTimeout(() => {\n        this.publish(this.props.index);\n      }, removeTime)\n    }\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    let className = classnames(\n      \"notice-box\",\n      {\n        active: this.state.active\n      }\n    )\n    return(\n      <div className = {className}>\n        <a className=\"close\" title=\"close\" onClick = {this.removeMessage}>x</a>\n        { this.props.content }\n      </div>\n    )\n  }\n\n}\n\nclass Notice extends Component {\n  componentDidMount() {\n  }\n  //\n  render() {\n\n    let items = this.props.notices.map((msg, i) => {\n      if ( msg == \"\") {\n        return false;\n      }\n      return (\n        <Item key = {i} index = {i} ref = {i} {...msg} />\n      )\n    })\n\n    return (\n      <div className = \"notice-container\">\n        { items }\n      </div>\n    )\n  }\n}\n\nPubSub.subscribe(ADD_MESSAGE, (topic, data) => {\n  noticesMessages = [...noticesMessages, data];\n\n  renderNotice();\n});\n\nvar remove_notice = PubSub.subscribe(REMOVE_MESSAGE, (topic, data) => {\n  let { index } = data;\n\n  if (!noticesMessages[index]) {\n    return false;\n  }\n\n  let historyMessage = noticesMessages[index].content;\n  historyMessages.push(historyMessage);\n  noticesMessages.splice(index, 1,\"\");\n\n  renderNotice();\n});\n\nNotice.getHistoryMessages = function() {\n\n  console.log(historyMessages);\n  return historyMessages;\n}\n\nNotice.show = function(content, param) {\n  if( !containerDOM ) {\n    containerDOM = document.createElement('div');\n    document.body.appendChild( containerDOM );\n  }\n\n  if ( param.closeTime ) {\n    if ( param.closeTime == \"infinite\") {\n      removeTime = false;\n    } else {\n      removeTime = Number( param.closeTime ) || 3000;\n    }\n  }\n\n  PubSub.publishSync(ADD_MESSAGE, {\n    content,\n    closeTime: param.closeTime\n  });\n\n  return containerElement;\n\n}\n\n\nfunction renderNotice() {\n  containerElement = ReactDOM.render(<Notice notices={noticesMessages} />,\n    containerDOM\n  );\n}\n\nmodule.exports = Notice;\n"]}